<!--
  This section renders a grid of six products with a popup modal functionality.
  - V7: Simplifies Liquid logic and adds more detailed JS error logging.
-->
<div class="custom-grid-container page-width">
  <h2 class="custom-grid-title">{{ section.settings.heading }}</h2>
  <div class="custom-grid">
    {% for block in section.blocks %}
      <div class="custom-grid-item" {{ block.shopify_attributes }}>
        {%- comment -%}
          If a product is selected in the block, use it.
          Otherwise, fall back to a product from the 'all' collection based on the block's position.
        {%- endcomment -%}
        {%- assign product = block.settings.product | default: collections.all.products[forloop.index0] -%}

        {%- if product != blank -%}
          <div class="custom-grid-item-inner">
            {%- if product.featured_image != null -%}
              <img
                src="{{ product.featured_image | image_url: width: 500 }}"
                alt="{{ product.featured_image.alt | escape }}"
                width="500"
                height="{{ 500 | divided_by: product.featured_image.aspect_ratio | round }}"
                loading="lazy">
            {%- else -%}
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
            {%- endif -%}
            <button type="button" class="open-popup-btn" aria-label="Open product details" data-product-handle="{{ product.handle }}">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /></svg>
            </button>
          </div>
        {%- else -%}
          <div class="custom-grid-item-inner placeholder">
            {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {%- endif -%}
      </div>
    {% endfor %}
  </div>
</div>

<!-- Popup Modal Structure -->
<div id="product-popup" class="popup-overlay" style="display: none;">
  <div class="popup-content">
    <button id="close-popup-btn" class="popup-close" aria-label="Close popup">
      <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1 1L13 13M1 13L13 1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" /></svg>
    </button>
    <div class="popup-body">
      <!-- Content will be injected by JavaScript -->
    </div>
  </div>
</div>

<style>
  .page-width {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  .custom-grid-container {
    padding-top: 50px;
    padding-bottom: 50px;
  }
  .custom-grid-title {
    font-family: 'Lustria', serif;
    text-align: left;
    font-size: 3rem;
    margin-bottom: 40px;
    font-weight: 400;
  }
  .custom-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }
  .custom-grid-item-inner {
    position: relative;
    overflow: hidden;
    aspect-ratio: 1 / 1.1;
  }
  .custom-grid-item-inner img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .open-popup-btn {
    position: absolute;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.2s ease;
    opacity: 1; /* Always visible */
  }

  /* START: Hard-coded icon positions */
  .custom-grid-item:nth-child(1) .open-popup-btn { top: 56%; left: 62%; }
  .custom-grid-item:nth-child(2) .open-popup-btn { top: 52%; left: 87%; }
  .custom-grid-item:nth-child(3) .open-popup-btn { top: 21%; left: 64%; }
  .custom-grid-item:nth-child(4) .open-popup-btn { top: 19%; left: 74%; }
  .custom-grid-item:nth-child(5) .open-popup-btn { top: 26%; left: 52%; }
  .custom-grid-item:nth-child(6) .open-popup-btn { top: 39%; left: 78%; }
  /* END: Hard-coded icon positions */

  .open-popup-btn:hover {
    transform: translate(-50%, -50%) scale(1.1);
  }
  .placeholder, .placeholder-svg {
    width: 100%;
    height: 100%;
    background: #f2f2f2;
  }

  /* --- POPUP STYLES --- */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .popup-content {
    background-color: #fff;
    padding: 20px;
    width: 90%;
    max-width: 400px;
    position: relative;
    max-height: 90vh;
    overflow-y: auto;
  }
  .popup-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    font-size: 1rem;
    cursor: pointer;
    color: #000;
  }
  .popup-body-flex {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  .popup-intro {
    display: flex;
    gap: 20px;
    align-items: flex-start;
  }
  .popup-image {
    flex-basis: 120px;
    flex-shrink: 0;
  }
  .popup-image img {
    width: 100%;
    aspect-ratio: 1 / 1.1;
    object-fit: cover;
  }
  .popup-intro-details {
    flex-grow: 1;
  }
  .popup-details h3 {
    font-family: 'Jost', sans-serif;
    margin-top: 0;
    font-size: 1.8rem;
    font-weight: 300;
  }
  .popup-price {
    font-family: 'Lustria', serif;
    font-size: 1.2rem;
    font-weight: 500;
    margin: 10px 0;
    color: #000;
  }
  .popup-description {
    font-family: 'Jost', sans-serif;
    font-size: 1.1rem;
    font-weight: 300;
    line-height: 1.2;
    color: #000;
  }
  .popup-variants { 
    margin-top: 0;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  .variant-group { margin-bottom: 0; }
  .variant-group > label { 
    display: block; 
    margin-bottom: 10px; 
    font-weight: 400;
    font-size: 0.9rem;
    color: #333;
  }
  
  /* Color Buttons */
  .variant-buttons {
    display: flex;
    border: 1px solid #ccc;
  }
  .variant-buttons .variant-color-label {
    flex-grow: 1;
    text-align: center;
    padding: 12px 10px;
    cursor: pointer;
    background-color: #fff;
    color: #000;
    border-right: 1px solid #ccc;
    transition: all 0.2s ease;
    position: relative;
    padding-left: 25px; /* Space for color bar */
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .variant-buttons .variant-color-label:last-child {
    border-right: none;
  }
  .variant-buttons .variant-color-label::before {
    content: '';
    position: absolute;
    left: 8px;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 60%;
    background-color: grey; /* Default color */
  }
  /* Add specific color styles */
  .variant-color-label.color-red::before { background-color: red; }
  .variant-color-label.color-grey::before { background-color: grey; }
  .variant-color-label.color-black::before { background-color: black; }
  .variant-color-label.color-white::before { background-color: #eee; border: 1px solid #ccc; }


  .variant-buttons input { display: none; }
  .variant-buttons input:checked + label {
    font-weight: 600;
    box-shadow: inset 0 0 0 1px #000;
    z-index: 2;
  }

  /* Size Dropdown */
  .variant-select-wrapper {
    position: relative;
  }
  .variant-select {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ccc;
    background-color: #fff;
    appearance: none;
    -webkit-appearance: none;
    font-size: 1rem;
    cursor: pointer;
  }
  .variant-select-wrapper::after {
    content: '';
    position: absolute;
    top: 50%;
    right: 15px;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 6px solid #000;
    pointer-events: none;
  }

  .add-to-cart-btn {
    width: 100%;
    padding: 15px;
    background-color: #000;
    color: #fff;
    border: 1px solid #000;
    font-size: 1.2rem;
    font-weight: 600;
    cursor: pointer;
    margin-top: 10px;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .add-to-cart-btn:hover { background-color: #333; }
  .add-to-cart-btn:disabled { background-color: #ccc; border-color: #ccc; cursor: not-allowed; }
  .popup-message { margin-top: 15px; text-align: center; color: green; font-weight: 500; }
  
  /* Responsive Mobile Styles */
  @media (max-width: 768px) {
    .custom-grid-title {
      text-align: center;
    }
    .custom-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }
    .popup-content {
        max-width: 320px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const popup = document.getElementById('product-popup');
    const closeBtn = document.getElementById('close-popup-btn');
    const popupBody = popup.querySelector('.popup-body');
    const openBtns = document.querySelectorAll('.open-popup-btn');

    let currentProductData = null;

    function openPopup() { popup.style.display = 'flex'; }
    function closePopup() {
      popup.style.display = 'none';
      popupBody.innerHTML = '';
      currentProductData = null;
    }

    async function loadProductIntoPopup(handle) {
      if (!handle) {
        console.error("Popup opened with no product handle.");
        return;
      }
      try {
        popupBody.innerHTML = '<p>Loading...</p>';
        openPopup();
        
        const response = await fetch(`/products/${handle}.js`);
        if (!response.ok) {
           throw new Error(`HTTP error ${response.status} for product handle: ${handle}. The product may not be published on the Online Store sales channel.`);
        }
        const product = await response.json();
        currentProductData = product;

        let variantsHtml = '';
        product.options_with_values.forEach(option => {
            const optionName = option.name.toLowerCase();
            if (optionName === 'color') {
                variantsHtml += `
                  <div class="variant-group" data-option-index="${option.position - 1}">
                    <label>${option.name}</label>
                    <div class="variant-buttons">
                      ${option.values.map(value => `
                        <input type="radio" name="option-${option.position - 1}" value="${value.title}" id="option-${option.position - 1}-${value.title.replace(/\s+/g, '-')}">
                        <label for="option-${option.position - 1}-${value.title.replace(/\s+/g, '-')}" class="variant-color-label color-${value.title.toLowerCase()}"><span>${value.title}</span></label>
                      `).join('')}
                    </div>
                  </div>`;
            }
            else if (optionName === 'size') {
                 variantsHtml += `
                  <div class="variant-group" data-option-index="${option.position - 1}">
                    <label>${option.name}</label>
                    <div class="variant-select-wrapper">
                      <select class="variant-select" name="option-${option.position - 1}">
                        <option value="">Choose your size</option>
                        ${option.values.map(value => `<option value="${value.title}">${value.title}</option>`).join('')}
                      </select>
                    </div>
                  </div>`;
            }
            else {
                 variantsHtml += `
                  <div class="variant-group" data-option-index="${option.position - 1}">
                    <label>${option.name}</label>
                    <div class="variant-select-wrapper">
                      <select class="variant-select" name="option-${option.position - 1}">
                        <option value="">Select ${option.name}</option>
                        ${option.values.map(value => `<option value="${value.title}">${value.title}</option>`).join('')}
                      </select>
                    </div>
                  </div>`;
            }
        });
        
        const productHtml = `
          <div class="popup-body-flex">
            <div class="popup-intro">
              <div class="popup-image">
                <img src="${product.featured_image}" alt="${product.title}">
              </div>
              <div class="popup-intro-details">
                <h3>${product.title}</h3>
                <div class="popup-price" id="popup-price"></div>
                <div class="popup-description">${product.description}</div>
              </div>
            </div>
            <form id="popup-product-form">
              <div class="popup-variants">${variantsHtml}</div>
              <input type="hidden" name="id" id="popup-variant-id" value="">
              <button type="submit" class="add-to-cart-btn" id="popup-add-to-cart-btn">
                <span>ADD TO CART</span>
                <svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 1L19 6M19 6L14.5 11M19 6H1" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
              </button>
              <div class="popup-message" id="popup-message"></div>
            </form>
          </div>
        `;
        popupBody.innerHTML = productHtml;
        updateVariantState();
        addPopupEventListeners();

      } catch (error) {
        console.error('Error fetching product:', error);
        popupBody.innerHTML = '<p>Sorry, there was an error loading this product.</p>';
      }
    }

    function updateVariantState() {
      const selectedOptions = [];
      const optionGroups = popup.querySelectorAll('.variant-group');
      optionGroups.forEach(group => {
        const index = parseInt(group.dataset.optionIndex);
        const radio = group.querySelector('input[type="radio"]:checked');
        const select = group.querySelector('select');
        
        if (radio) {
          selectedOptions[index] = radio.value;
        } else if (select) {
          selectedOptions[index] = select.value;
        } else {
            const firstRadio = group.querySelector('input[type="radio"]');
            if(firstRadio) {
                firstRadio.checked = true;
                selectedOptions[index] = firstRadio.value;
            }
        }
      });
      
      const matchedVariant = currentProductData.variants.find(variant => 
        variant.options.every((optionValue, index) => optionValue === selectedOptions[index])
      );

      const priceEl = document.getElementById('popup-price');
      const variantIdEl = document.getElementById('popup-variant-id');
      const addToCartBtn = document.getElementById('popup-add-to-cart-btn');

      if (matchedVariant) {
        priceEl.textContent = new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(matchedVariant.price / 100);
        variantIdEl.value = matchedVariant.id;
        addToCartBtn.disabled = !matchedVariant.available;
        addToCartBtn.querySelector('span').textContent = matchedVariant.available ? 'ADD TO CART' : 'SOLD OUT';
      } else {
        priceEl.textContent = new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(currentProductData.price / 100);
        variantIdEl.value = '';
        addToCartBtn.disabled = true;
        addToCartBtn.querySelector('span').textContent = 'UNAVAILABLE';
      }
    }

    async function handleAddToCart(event) {
      event.preventDefault();
      const form = event.target;
      const addToCartBtn = form.querySelector('button[type="submit"]');
      const messageEl = document.getElementById('popup-message');
      const selectedVariantId = document.getElementById('popup-variant-id').value;
      if (!selectedVariantId) return;

      addToCartBtn.disabled = true;
      addToCartBtn.querySelector('span').textContent = 'ADDING...';
      messageEl.textContent = '';

      let itemsToAdd = [{ id: selectedVariantId, quantity: 1 }];

      const selectedVariant = currentProductData.variants.find(v => v.id == selectedVariantId);
      const options = selectedVariant.options.map(opt => opt.toLowerCase());

      if (options.includes('black') && options.includes('medium')) {
          try {
            const jacketResponse = await fetch('/products/soft-winter-jacket.js');
            if (jacketResponse.ok) {
              const jacketProduct = await jacketResponse.json();
              const jacketVariant = jacketProduct.variants.find(v => v.available);
              if (jacketVariant) {
                itemsToAdd.push({ id: jacketVariant.id, quantity: 1 });
              }
            }
          } catch(e) { console.error("Could not add special product", e); }
      }

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: itemsToAdd })
        });
        
        if (response.ok) {
          messageEl.textContent = 'Added to cart successfully!';
          setTimeout(() => { closePopup() }, 1500);
        } else {
          const errorData = await response.json();
          messageEl.textContent = errorData.description || 'Error adding to cart.';
          messageEl.style.color = 'red';
          addToCartBtn.disabled = false;
          updateVariantState();
        }
      } catch (error) {
        messageEl.textContent = 'Could not add to cart.';
        messageEl.style.color = 'red';
        addToCartBtn.disabled = false;
        updateVariantState();
      }
    }

    openBtns.forEach(btn => btn.addEventListener('click', () => loadProductIntoPopup(btn.dataset.productHandle)));
    
    function addPopupEventListeners() {
       document.getElementById('popup-product-form').addEventListener('submit', handleAddToCart);
       popup.querySelectorAll('.variant-group input, .variant-group select').forEach(el => {
          el.addEventListener('change', updateVariantState);
       });
    }

    closeBtn.addEventListener('click', closePopup);
    popup.addEventListener('click', e => { if (e.target === popup) closePopup(); });
  });
</script>

{% schema %}
{
  "name": "Custom Product Grid",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "TISSO VISON in the wild"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid",
      "blocks": [
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" }
      ]
    }
  ]
}
{% endschema %}

