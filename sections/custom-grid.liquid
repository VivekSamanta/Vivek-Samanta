<!--
  This section renders a grid of six products with a popup modal functionality.
  - V4: Hard-codes the icon positions in CSS and removes customizer settings for them.
-->
<div class="custom-grid-container page-width">
  <h2 class="custom-grid-title">{{ section.settings.heading }}</h2>
  <div class="custom-grid">
    {%- comment -%}
      If blocks are configured by the user, render them.
      Otherwise, fall back to the first 6 products from the "all" collection as a default.
    {%- endcomment -%}
    {%- if section.blocks.size > 0 -%}
      {% for block in section.blocks %}
        <div class="custom-grid-item" {{ block.shopify_attributes }}>
          {%- assign product = block.settings.product -%}
          {%- if product != blank -%}
            <div class="custom-grid-item-inner">
              {%- if product.featured_image != null -%}
                <img src="{{ product.featured_image | image_url: width: 500 }}"
                     alt="{{ product.featured_image.alt | escape }}"
                     width="500"
                     height="{{ 500 | divided_by: product.featured_image.aspect_ratio | round }}"
                     loading="lazy">
              {%- else -%}
                {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
              {%- endif -%}
              <button type="button" class="open-popup-btn" aria-label="Open product details" data-product-handle="{{ product.handle }}">
                <svg width="24" height="24" viewBox="4 4 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
              </button>
            </div>
          {%- else -%}
            <div class="custom-grid-item-inner placeholder">
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
            </div>
          {%- endif -%}
        </div>
      {% endfor %}
    {%- else -%}
      {%- for product in collections.all.products limit: 6 -%}
        <div class="custom-grid-item">
          <div class="custom-grid-item-inner">
            {%- if product.featured_image != null -%}
              <img src="{{ product.featured_image | image_url: width: 500 }}"
                   alt="{{ product.featured_image.alt | escape }}"
                   width="500"
                   height="{{ 500 | divided_by: product.featured_image.aspect_ratio | round }}"
                   loading="lazy">
            {%- else -%}
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
            {%- endif -%}
            <button type="button" class="open-popup-btn" aria-label="Open product details" data-product-handle="{{ product.handle }}">
              <svg width="24" height="24" viewBox="4 4 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
            </button>
          </div>
        </div>
      {%- else -%}
        {%- comment -%} Fallback for when there are no products in the store at all {%- endcomment -%}
        {%- for i in (1..6) -%}
          <div class="custom-grid-item">
            <div class="custom-grid-item-inner placeholder">
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
            </div>
          </div>
        {%- endfor -%}
      {%- endfor -%}
    {%- endif -%}
  </div>
</div>

<!-- Popup Modal Structure -->
<div id="product-popup" class="popup-overlay" style="display: none;">
  <div class="popup-content">
    <button id="close-popup-btn" class="popup-close" aria-label="Close popup">&times;</button>
    <div class="popup-body">
      <!-- Content will be injected by JavaScript -->
    </div>
  </div>
</div>

<style>
  .page-width {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }
  .custom-grid-container {
    padding-top: 50px;
    padding-bottom: 50px;
  }
  .custom-grid-title {
    text-align: left;
    font-size: 2rem;
    margin-bottom: 40px;
    font-weight: 500;
  }
  .custom-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }
  .custom-grid-item-inner {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    aspect-ratio: 1 / 1.1;
  }
  .custom-grid-item-inner img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .open-popup-btn {
    position: absolute;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #000;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.2s ease;
    opacity: 1; /* Always visible */
  }

  /* START: Hard-coded icon positions */
  .custom-grid-item:nth-child(1) .open-popup-btn { top: 56%; left: 62%; }
  .custom-grid-item:nth-child(2) .open-popup-btn { top: 52%; left: 87%; }
  .custom-grid-item:nth-child(3) .open-popup-btn { top: 45%; left: 75%; }
  .custom-grid-item:nth-child(4) .open-popup-btn { top: 70%; left: 55%; }
  .custom-grid-item:nth-child(5) .open-popup-btn { top: 60%; left: 70%; }
  .custom-grid-item:nth-child(6) .open-popup-btn { top: 65%; left: 85%; }
  /* END: Hard-coded icon positions */


  .open-popup-btn:hover {
    transform: translate(-50%, -50%) scale(1.1);
  }

  .placeholder, .placeholder-svg {
    width: 100%;
    height: 100%;
    background: #f2f2f2;
  }

  /* Popup styles */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .popup-content {
    background-color: #fff;
    padding: 30px;
    border-radius: 8px;
    width: 90%;
    max-width: 800px;
    position: relative;
    max-height: 90vh;
    overflow-y: auto;
  }
  .popup-close {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    color: #888;
  }
  .popup-body-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }
  .popup-image img {
    width: 100%;
    border-radius: 8px;
  }
  .popup-details h3 {
    margin-top: 0;
    font-size: 1.8rem;
  }
  .popup-price {
    font-size: 1.2rem;
    margin: 10px 0;
    color: #555;
  }
  .popup-description {
    font-size: 0.95rem;
    line-height: 1.6;
    color: #333;
  }
  .popup-variants { margin-top: 20px; }
  .variant-group { margin-bottom: 15px; }
  .variant-group label { display: block; margin-bottom: 8px; font-weight: 600; }
  .variant-radios { display: flex; flex-wrap: wrap; gap: 10px; }
  .variant-radios label {
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  .variant-radios input { display: none; }
  .variant-radios input:checked + label {
    background-color: #000;
    color: #fff;
    border-color: #000;
  }
  .add-to-cart-btn {
    width: 100%;
    padding: 15px;
    background-color: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    margin-top: 20px;
    transition: background-color 0.3s;
  }
  .add-to-cart-btn:hover { background-color: #333; }
  .add-to-cart-btn:disabled { background-color: #ccc; cursor: not-allowed; }
  .popup-message { margin-top: 15px; text-align: center; color: green; font-weight: 500; }
  
  /* Responsive Mobile Styles */
  @media (max-width: 768px) {
    .custom-grid-title {
      text-align: center;
    }
    .custom-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }
    .popup-content {
      padding: 20px;
    }
    .popup-body-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const popup = document.getElementById('product-popup');
    const closeBtn = document.getElementById('close-popup-btn');
    const popupBody = popup.querySelector('.popup-body');
    const openBtns = document.querySelectorAll('.open-popup-btn');

    let currentProductData = null;

    // --- Functions to handle the popup ---
    
    function openPopup() {
      popup.style.display = 'flex';
    }

    function closePopup() {
      popup.style.display = 'none';
      popupBody.innerHTML = ''; // Clear content on close
      currentProductData = null;
    }

    // --- Function to fetch product data and populate the popup ---
    
    async function loadProductIntoPopup(handle) {
      try {
        // Show a loading state
        popupBody.innerHTML = '<p>Loading...</p>';
        openPopup();
        
        // Fetch product data from Shopify's JSON API
        const response = await fetch(`/products/${handle}.js`);
        if (!response.ok) throw new Error('Product not found');
        const product = await response.json();
        currentProductData = product;

        // Build the HTML for the popup content
        let variantsHtml = '';
        if (product.options.length > 1 || (product.options.length === 1 && product.options[0].name !== 'Title')) {
           product.options.forEach((option, index) => {
               variantsHtml += `
                <div class="variant-group" data-option-index="${index}">
                  <label>${option.name}</label>
                  <div class="variant-radios">
                    ${[...new Set(product.variants.map(v => v.options[index]))].map(value => `
                      <input type="radio" name="option-${index}" value="${value}" id="option-${index}-${value.replace(/\s+/g, '-')}" data-option-value="${value}">
                      <label for="option-${index}-${value.replace(/\s+/g, '-')}">${value}</label>
                    `).join('')}
                  </div>
                </div>
               `;
           });
        }

        const productHtml = `
          <div class="popup-body-grid">
            <div class="popup-image">
              <img src="${product.featured_image}" alt="${product.title}">
            </div>
            <div class="popup-details">
              <h3>${product.title}</h3>
              <div class="popup-price" id="popup-price"></div>
              <div class="popup-description">${product.description}</div>
              <form id="popup-product-form">
                <div class="popup-variants">${variantsHtml}</div>
                <input type="hidden" name="id" id="popup-variant-id" value="${product.variants[0].id}">
                <button type="submit" class="add-to-cart-btn" id="popup-add-to-cart-btn">Add to Cart</button>
                <div class="popup-message" id="popup-message"></div>
              </form>
            </div>
          </div>
        `;
        popupBody.innerHTML = productHtml;
        updateVariantState();
        addPopupEventListeners();

      } catch (error) {
        console.error('Error fetching product:', error);
        popupBody.innerHTML = '<p>Sorry, there was an error loading this product.</p>';
      }
    }

    // --- Functions to handle variant selection ---
    
    function updateVariantState() {
      const selectedOptions = [];
      const optionRadios = popup.querySelectorAll('.variant-group');
      optionRadios.forEach((group, index) => {
        const checkedRadio = group.querySelector('input[type="radio"]:checked');
        if (checkedRadio) {
          selectedOptions[index] = checkedRadio.value;
        } else {
          // If no radio is checked, automatically check the first one
          const firstRadio = group.querySelector('input[type="radio"]');
          if(firstRadio){
            firstRadio.checked = true;
            selectedOptions[index] = firstRadio.value;
          }
        }
      });
      
      const matchedVariant = currentProductData.variants.find(variant => {
        return selectedOptions.every((option, index) => variant.options[index] === option);
      });

      const priceEl = document.getElementById('popup-price');
      const variantIdEl = document.getElementById('popup-variant-id');
      const addToCartBtn = document.getElementById('popup-add-to-cart-btn');

      if (matchedVariant) {
        priceEl.textContent = new Intl.NumberFormat(undefined, { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(matchedVariant.price / 100);
        variantIdEl.value = matchedVariant.id;
        addToCartBtn.disabled = !matchedVariant.available;
        addToCartBtn.textContent = matchedVariant.available ? 'Add to Cart' : 'Sold Out';
      } else {
        // A combination is selected that doesn't exist
        priceEl.textContent = '';
        variantIdEl.value = '';
        addToCartBtn.disabled = true;
        addToCartBtn.textContent = 'Unavailable';
      }
    }

    // --- Function to handle form submission (Add to Cart) ---

    async function handleAddToCart(event) {
      event.preventDefault();
      const form = event.target;
      const addToCartBtn = form.querySelector('button[type="submit"]');
      const messageEl = document.getElementById('popup-message');
      
      const selectedVariantId = document.getElementById('popup-variant-id').value;
      if (!selectedVariantId) return;

      addToCartBtn.disabled = true;
      addToCartBtn.textContent = 'Adding...';
      messageEl.textContent = '';

      // Prepare items for the cart API
      let itemsToAdd = [{ id: selectedVariantId, quantity: 1 }];

      // ** SPECIAL LOGIC **
      // Check if the added product has variants "Black" and "Medium"
      const selectedVariant = currentProductData.variants.find(v => v.id == selectedVariantId);
      const options = selectedVariant.options.map(opt => opt.toLowerCase());

      if (options.includes('black') && options.includes('medium')) {
          try {
            // We need the variant ID for "Soft Winter Jacket".
            // Fetching it dynamically makes the code more robust.
            const jacketResponse = await fetch('/products/soft-winter-jacket.js');
            if (jacketResponse.ok) {
              const jacketProduct = await jacketResponse.json();
              // Assuming we add the first available variant of the jacket
              const jacketVariant = jacketProduct.variants.find(v => v.available);
              if (jacketVariant) {
                itemsToAdd.push({ id: jacketVariant.id, quantity: 1 });
                 console.log('Adding special product: Soft Winter Jacket');
              }
            }
          } catch(e) {
            console.error("Could not add special product", e);
          }
      }

      // Use the Shopify Cart AJAX API
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: itemsToAdd })
        });
        
        if (response.ok) {
          messageEl.textContent = 'Added to cart successfully!';
          // You could also update a cart icon or drawer here
        } else {
          const errorData = await response.json();
          messageEl.textContent = errorData.description || 'Error adding to cart.';
          messageEl.style.color = 'red';
        }

      } catch (error) {
        console.error('Error adding to cart:', error);
        messageEl.textContent = 'Could not add to cart.';
        messageEl.style.color = 'red';
      } finally {
        addToCartBtn.disabled = false;
        addToCartBtn.textContent = 'Add to Cart';
        setTimeout(() => { closePopup() }, 2000); // Close popup after 2 seconds
      }
    }


    // --- Add Event Listeners ---
    
    openBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const handle = btn.dataset.productHandle;
        if (handle) {
          loadProductIntoPopup(handle);
        }
      });
    });

    function addPopupEventListeners() {
       const form = document.getElementById('popup-product-form');
       form.addEventListener('submit', handleAddToCart);

       const variantRadios = popup.querySelectorAll('.variant-radios input');
       variantRadios.forEach(radio => {
          radio.addEventListener('change', updateVariantState);
       });
    }

    closeBtn.addEventListener('click', closePopup);
    popup.addEventListener('click', (event) => {
      // Close if clicking on the overlay but not the content
      if (event.target === popup) {
        closePopup();
      }
    });
  });
</script>


{% schema %}
{
  "name": "Custom Product Grid",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "TISSO VISON in the wild"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid",
      "blocks": [
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" },
        { "type": "product" }
      ]
    }
  ]
}
{% endschema %}