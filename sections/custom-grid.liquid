<!-- GRID SECTION -->
<div class="custom-grid-container page-width">
  <h2 class="custom-grid-title">{{ section.settings.heading }}</h2>
  <div class="custom-grid">
    {%- if section.blocks.size > 0 -%}
      {% for block in section.blocks %}
        <div class="custom-grid-item" {{ block.shopify_attributes }}>
          {%- assign product = block.settings.product -%}
          {%- if product != blank -%}
            <div class="custom-grid-item-inner">
              {%- if product.featured_image != null -%}
                <img 
                  src="{{ product.featured_image | image_url: width: 500 }}"
                  alt="{{ product.featured_image.alt | escape }}"
                  width="500"
                  height="{{ 500 | divided_by: product.featured_image.aspect_ratio | round }}"
                  loading="lazy">
              {%- else -%}
                {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
              {%- endif -%}
              <button 
                type="button" 
                class="open-popup-btn" 
                aria-label="Open product details" 
                data-product-handle="{{ product.handle }}">
                <svg width="24" height="24" viewBox="4 4 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
            </div>
          {%- else -%}
            <div class="custom-grid-item-inner placeholder">
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
            </div>
          {%- endif -%}
        </div>
      {% endfor %}
    {%- else -%}
      {%- for product in collections.all.products limit: 6 -%}
        <div class="custom-grid-item">
          <div class="custom-grid-item-inner">
            {%- if product.featured_image != null -%}
              <img 
                src="{{ product.featured_image | image_url: width: 500 }}"
                alt="{{ product.featured_image.alt | escape }}"
                width="500"
                height="{{ 500 | divided_by: product.featured_image.aspect_ratio | round }}"
                loading="lazy">
            {%- else -%}
              {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
            {%- endif -%}
            <button 
              type="button" 
              class="open-popup-btn" 
              aria-label="Open product details" 
              data-product-handle="{{ product.handle }}">
              <svg width="24" height="24" viewBox="4 4 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
      {%- endfor -%}
    {%- endif -%}
  </div>
</div>

<!-- Popup Modal -->
<div id="product-popup" class="popup-overlay" style="display: none;">
  <div class="popup-card">
    <button id="close-popup-btn" class="popup-close" aria-label="Close popup">&times;</button>
    <div class="popup-body"></div>
  </div>
</div>

<style>
  .custom-grid-container { padding: 50px 0; }
  .custom-grid-title {
    font-family: 'Lustria', serif;
    font-size: 3rem;
    font-weight: 400;
    margin-bottom: 40px;
    text-align: left;
  }
  .custom-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }
  .custom-grid-item-inner { position: relative; aspect-ratio: 1/1.1; }
  .custom-grid-item-inner img { width: 100%; height: 100%; object-fit: cover; }

  .open-popup-btn {
    position: absolute;
    background: rgba(255,255,255,0.9);
    border: none;
    border-radius: 50%;
    width: 32px; height: 32px;
    display: flex; align-items: center; justify-content: center;
    cursor: pointer;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    transform: translate(-50%,-50%);
    transition: transform 0.2s ease;
  }
  .open-popup-btn:hover { transform: translate(-50%,-50%) scale(1.1); }

  /* Popup styles */
  .popup-overlay {
    position: fixed; inset: 0;
    display: flex; align-items: center; justify-content: center;
    background: rgba(0,0,0,0.6);
    z-index: 1000;
  }
  .popup-card {
    background: #fff;
    border-radius: 16px;
    width: 90%; max-width: 480px;
    padding: 24px;
    position: relative;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 8px 20px rgba(0,0,0,0.2);
  }
  .popup-close {
    position: absolute; top: 12px; right: 16px;
    background: none; border: none; font-size: 2rem;
    color: #666; cursor: pointer;
  }
  .popup-body-grid { display: grid; gap: 20px; }
  .popup-image img { width: 100%; border-radius: 12px; }
  .popup-details h3 {
    font-family: 'Jost', sans-serif;
    font-size: 1.6rem;
    font-weight: 500;
    margin: 0 0 10px;
  }
  .popup-price {
    font-family: 'Lustria', serif;
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 12px;
  }
  .popup-description {
    font-family: 'Jost', sans-serif;
    font-size: 1rem;
    line-height: 1.4;
    color: #333;
  }
  .variant-group { margin: 20px 0; }
  .variant-radios { display: flex; flex-wrap: wrap; gap: 10px; }
  .variant-radios input { display: none; }
  .variant-radios label {
    padding: 8px 16px;
    border: 1px solid #ccc;
    border-radius: 20px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }
  .variant-radios input:checked + label {
    background: #000; color: #fff; border-color: #000;
  }
  .add-to-cart-btn {
    width: 100%; padding: 14px;
    background: #000; color: #fff;
    border: none; border-radius: 8px;
    font-size: 1.1rem; font-weight: 600;
    cursor: pointer;
    margin-top: 20px;
    transition: background 0.3s;
  }
  .add-to-cart-btn:hover { background: #333; }
  .popup-message { margin-top: 15px; text-align: center; font-weight: 500; }

  @media(max-width:768px) {
    .custom-grid { grid-template-columns: repeat(2,1fr); gap: 15px; }
    .custom-grid-title { text-align: center; font-size: 2rem; }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const popup = document.getElementById('product-popup');
  const closeBtn = document.getElementById('close-popup-btn');
  const popupBody = popup.querySelector('.popup-body');
  const openBtns = document.querySelectorAll('.open-popup-btn');
  let currentProduct = null;

  function openPopup() { popup.style.display = 'flex'; }
  function closePopup() {
    popup.style.display = 'none';
    popupBody.innerHTML = '';
    currentProduct = null;
  }

  async function loadProduct(handle) {
    popupBody.innerHTML = '<p>Loading...</p>';
    openPopup();
    try {
      const res = await fetch(`/products/${handle}.js`);
      if (!res.ok) throw new Error('Product not found');
      const product = await res.json();
      currentProduct = product;

      let variantsHtml = '';
      product.options.forEach((opt, i) => {
        if (opt.name !== 'Title') {
          const values = [...new Set(product.variants.map(v => v.options[i]))];
          variantsHtml += `
            <div class="variant-group" data-option-index="${i}">
              <label>${opt.name}</label>
              <div class="variant-radios">
                ${values.map(v => `
                  <input type="radio" name="option-${i}" value="${v}" id="option-${i}-${v}">
                  <label for="option-${i}-${v}">${v}</label>
                `).join('')}
              </div>
            </div>`;
        }
      });

      popupBody.innerHTML = `
        <div class="popup-body-grid">
          <div class="popup-image">
            <img src="${product.featured_image}" alt="${product.title}">
          </div>
          <div class="popup-details">
            <h3>${product.title}</h3>
            <div id="popup-price" class="popup-price"></div>
            <div class="popup-description">${product.description}</div>
          </div>
          <form id="popup-form">
            <div class="popup-variants">${variantsHtml}</div>
            <input type="hidden" name="id" id="variant-id" value="${product.variants[0].id}">
            <button type="submit" class="add-to-cart-btn">Add to Cart</button>
            <div id="popup-message" class="popup-message"></div>
          </form>
        </div>`;
      initVariantListeners();
      updateVariant();
    } catch (e) {
      popupBody.innerHTML = '<p>Error loading product.</p>';
    }
  }

  function updateVariant() {
    const opts = [];
    document.querySelectorAll('.variant-group').forEach((g,i) => {
      const checked = g.querySelector('input:checked');
      if (checked) opts[i] = checked.value;
      else {
        const first = g.querySelector('input');
        if (first) { first.checked = true; opts[i] = first.value; }
      }
    });
    const variant = currentProduct.variants.find(v => 
      opts.every((o,i) => v.options[i] === o)
    );
    const priceEl = document.getElementById('popup-price');
    const idEl = document.getElementById('variant-id');
    const btn = document.querySelector('.add-to-cart-btn');

    if (variant) {
      priceEl.textContent = new Intl.NumberFormat(undefined,{style:'currency',currency:'{{ cart.currency.iso_code }}'}).format(variant.price/100);
      idEl.value = variant.id;
      btn.disabled = !variant.available;
      btn.textContent = variant.available ? 'Add to Cart' : 'Sold Out';
    } else {
      priceEl.textContent = '';
      idEl.value = '';
      btn.disabled = true;
      btn.textContent = 'Unavailable';
    }
  }

  function initVariantListeners() {
    document.querySelectorAll('.variant-radios input').forEach(r => 
      r.addEventListener('change', updateVariant)
    );
    document.getElementById('popup-form').addEventListener('submit', addToCart);
  }

  async function addToCart(e) {
    e.preventDefault();
    const btn = e.target.querySelector('.add-to-cart-btn');
    const msg = document.getElementById('popup-message');
    const id = document.getElementById('variant-id').value;
    if (!id) return;

    btn.disabled = true; btn.textContent = 'Adding...'; msg.textContent = '';

    let items = [{id,quantity:1}];
    const variant = currentProduct.variants.find(v => v.id == id);
    if (variant) {
      const opts = variant.options.map(o => o.toLowerCase());
      if (opts.includes('black') && opts.includes('medium')) {
        try {
          const jacketRes = await fetch('/products/soft-winter-jacket.js');
          if (jacketRes.ok) {
            const jacket = await jacketRes.json();
            const jacketVariant = jacket.variants.find(v => v.available);
            if (jacketVariant) items.push({id:jacketVariant.id,quantity:1});
          }
        } catch(err) { console.error(err); }
      }
    }

    try {
      const res = await fetch('/cart/add.js',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({items})});
      if (res.ok) msg.textContent = 'Added to cart!';
      else { const err = await res.json(); msg.textContent = err.description||'Error'; msg.style.color='red'; }
    } catch(err) { msg.textContent = 'Could not add.'; msg.style.color='red'; }
    finally { btn.disabled=false; btn.textContent='Add to Cart'; setTimeout(closePopup,2000); }
  }

  openBtns.forEach(b => b.addEventListener('click',()=>loadProduct(b.dataset.productHandle)));
  closeBtn.addEventListener('click', closePopup);
  popup.addEventListener('click', e => { if(e.target===popup) closePopup(); });
});
</script>
